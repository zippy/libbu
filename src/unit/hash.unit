// vim: syntax=cpp
/*
 * Copyright (C) 2007-2011 Xagasoft, All rights reserved.
 *
 * This file is part of the libbu++ library and is released under the
 * terms of the license contained in the file LICENSE.
 */

#include "bu/string.h"
#include "bu/hash.h"

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef Bu::Hash<Bu::String, int> StrIntHash;
typedef Bu::Hash<Bu::String, Bu::String> StrStrHash;
typedef Bu::Hash<int, Bu::String> IntStrHash;

suite Hash
{
	test probe1
	{
		StrIntHash h;
		char buf[20];
		for(int i=1;i<10000;i++)
		{
			sprintf(buf,"%d",i);
			Bu::String sTmp(buf);
			h[sTmp] = i;
			unitTest( h.has(sTmp) );
		}
	}

	test insert1
	{
		StrIntHash h;
		h["Hi"] = 42;
		unitTest( h["Hi"] == 42 );
	}

	test insert2
	{
		StrStrHash h;
		h["Hi"] = "Yo";
		h["Bye"] = "Later";
		unitTest( h["Hi"].getValue() == "Yo" );

		StrStrHash h2(h);
		unitTest( h2["Hi"].getValue() == "Yo" );
		unitTest( h2["Bye"].getValue() == "Later" );

		StrStrHash h3;
		h3 = h;
		unitTest( h3["Hi"].getValue() == "Yo" );
		unitTest( h3["Bye"].getValue() == "Later" );
	}

	test insert3
	{
		IntStrHash h;

		for( unsigned int i=1; i<50; i++ )
		{
			h[i] = "testing";
			unitTest( h.getSize() == i );
		}
	}

	test erase1
	{
		StrIntHash h;
		h.insert("Number 1", 1 );
		h.insert("Number 2", 2 );
		h.insert("Number 3", 3 );
		h.erase("Number 2");
		h.get("Number 3");
		try {
			h.get("Number 2");
			unitFailed("h.get(\"Number 2\") should have thrown an exception.");
		} catch( Bu::HashException &e ) { }

	/*	printf("\n");
		for( StrIntHash::iterator i = h.begin(); i != h.end(); i++ )
		{
			printf(" - \"%s\" = %d\n", i.getKey().getStr(), i.getValue() );
		} */
	}

	test copy
	{
		StrIntHash h;
		h.insert("hello", 55 );
		h.insert("goodbye", -1812 );

		StrIntHash h2 = h;
		unitTest( h2.isCoreShared( h ) );

		StrIntHash h3 = h.clone();
		unitTest( !h3.isCoreShared( h ) );
	}

	test stress
	{
		srandom(time(NULL));

		IntStrHash hTest;
		setStepCount( 1000000 );

		for( int i=0; i<1000000; ++i )
		{
			char buf[40]; snprintf(buf,40,"num%d",i);
			hTest[i] = buf;
			incProgress();

			/*printf("(%s) size: %u fill: %u cap:%u\n",
				buf,
				hTest.getSize(),
				hTest.getFill(),
				hTest.getCapacity()
				);*/

			if( ((double)random()/(double)RAND_MAX)<.3 )
			{
				Bu::List<int> lKeys = hTest.getKeys();
				int iIdx = (int)(((double)random()/(double)RAND_MAX)
					*lKeys.getSize());
				Bu::List<int>::const_iterator it = lKeys.begin();
				for( int k=0; it; ++it, ++k )
				{
					if( k == iIdx )
						hTest.erase( *it );
				}
			}

			if( hTest.getSize() > 100 )
			{
				int iK = (int)(((double)random()/(double)RAND_MAX)*50)+10;
				for( int j=0; j<iK; ++j )
				{
					Bu::List<int> lKeys = hTest.getKeys();
					int iIdx = (int)(((double)random()/(double)RAND_MAX)
						*lKeys.getSize());
					Bu::List<int>::const_iterator it = lKeys.begin();
					for( int k=0; it; ++it, ++k )
					{
						if( k == iIdx )
						{
							hTest.erase( *it );
							break;
						}
					}
				}
			}
		}
	}
}
