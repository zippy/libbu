// vim: syntax=cpp
/*
 * Copyright (C) 2007-2008 Xagasoft, All rights reserved.
 *
 * This file is part of the libbu++ library and is released under the
 * terms of the license contained in the file LICENSE.
 */

#include "bu/fstring.h"

#include <dirent.h>

{=Init}

{%compare1}
{
	Bu::FString b("Bob");
	unitTest( !(b == "Bobo") );
	unitTest( b == "Bob" );
}

{%compare2}
{
	Bu::FString b("Bobo");
	unitTest( !(b == "Bob") );
	unitTest( b == "Bobo" );
}

{%appendSingle}
{
	Bu::FString b;
	for( char l = 'a'; l < 'g'; l++ )
		b += l;
	unitTest( b == "abcdef" );
	unitTest( strcmp( b.getStr(), "abcdef" ) == 0 );
}

{%shared1:fail}
{
	Bu::FString a("Hey there");
	Bu::FString b( a );
	unitTest( a.getStr() == b.getStr() );
	b += " guy";
	unitTest( a.getStr() != b.getStr() );
	a = b;
	unitTest( a.getStr() == b.getStr() );
}

{%insert}
{
	Bu::FString a("abcd");
	a.insert( 2, "-!-", 3 );
	unitTest( a == "ab-!-cd" );
	
	a.insert( 0, "!!", 2 );
	unitTest( a == "!!ab-!-cd" );
	
	a.insert( -10, "789", 3 );
	unitTest( a == "789!!ab-!-cd" );
	
	a.insert( 12, "89", 2 );
	unitTest( a == "789!!ab-!-cd89" );
	
	a.insert( 1203, "12", 2 );
	unitTest( a == "789!!ab-!-cd8912" );
}

{%remove}
{
	Bu::FString a("abHEYcd");
	a.remove( 2, 3 );
	unitTest( a == "abcd" );
	a.remove( 2, 5 );
	unitTest( a == "ab" );
	a += "cdefghijklmnop";
	a.remove( 5, 1 );
	unitTest( a = "abcdeghijklmnop" );
}

{%add1}
{
	Bu::FString a("hi there");
	Bu::FString b(", yeah!");
	Bu::FString c = a + b;

	unitTest( c == "hi there, yeah!" );
}

{%add2}
{
	Bu::FString a("hi there");
	Bu::FString c = a + ", yeah!";

	unitTest( c == "hi there, yeah!" );
}

{%add3}
{
	Bu::FString a("hi there");
	Bu::FString b(", yeah!");
	Bu::FString c = a + ", Mr. Man" + b;

	unitTest( c == "hi there, Mr. Man, yeah!" );
}

{%add4}
{
	Bu::FString b(", yeah!");
	Bu::FString c = "hi there" + b;

	unitTest( c == "hi there, yeah!" );
}

{%add5}
{
	Bu::FString b;
	Bu::FString c = "sup?";
	b += "hey, " + c;
	
	unitTest( b == "hey, sup?" );
}

{%add6}
{
	Bu::FString a("Hello");
	char b[256] = {"Dude"};
	Bu::FString c = a + "/" + b;

	unitTest( c == "Hello/Dude" );
}

{%add7}
{
	const Bu::FString a("hello ");
	Bu::FString b(" how ");
	unitTest( a == "hello " );
	unitTest( a + "dude" == "hello dude" );
	unitTest( a + "dude" + b + "are you?" == "hello dude how are you?" );
}

{%subStr1}
{
	Bu::FString a("abcdefghijklmnop");
	unitTest( a.getSubStr( 5, 3 ) == "fgh" );
	unitTest( a.getSubStr( 10 ) == "klmnop" );
	unitTest( a.getSubStr( 40 ) == "" );
	unitTest( a.getSubStr( -10 ) == "abcdefghijklmnop" );
	unitTest( a.getSubStr( -15, 4 ) == "abcd" );
}

{%compareSub1}
{
	Bu::FString a("just a string.");
	unitTest( a.compareSub("a ", 5, 2) == true );
	unitTest( a.compareSub("string.aoeu", 7, 11 ) == false );
	unitTest( a.compareSub("string.aoeu", 7, 3 ) == true );
}

{%compareSub2}
{
	Bu::FString a("just a string.");
	unitTest( a.compareSub(Bu::FString("a "), 5, 2) == true );
	unitTest( a.compareSub(Bu::FString("string.aoeu"), 7, 11 ) == false );
	unitTest( a.compareSub(Bu::FString("string.aoeu"), 7, 3 ) == true );
}

{%iterator1}
{
	Bu::FString a("This is a test.");
	Bu::FString b;
	for( Bu::FString::iterator i = a.begin(); i; i++ )
	{
		b += *i;
	}
	unitTest( a == b );
}

{%iterator2}
{
	Bu::FString a("This is a test.");
	Bu::FString b("--This is a test.");
	Bu::FString::iterator ai = a.begin();
	Bu::FString::iterator bi = b.begin();
	unitTest( ai.compare( bi ) == false );
	unitTest( bi.compare( ai ) == false );
	bi++; bi++;
	unitTest( ai.compare( bi ) == true );
	unitTest( bi.compare( ai ) == true );
}

{%iterator3}
{
	Bu::FString a("1234honour");
	Bu::FString b("--1234ueje");
	Bu::FString::iterator ai = a.begin();
	Bu::FString::iterator bi = b.begin();
	unitTest( ai.compare( bi, 4 ) == false );
	unitTest( bi.compare( ai, 4 ) == false );
	bi++; bi++;
	unitTest( ai.compare( bi, 4 ) == true );
	unitTest( bi.compare( ai, 4 ) == true );
	unitTest( ai.compare( bi, 5 ) == false );
	unitTest( bi.compare( ai, 5 ) == false );

}

{%iterator4}
{
	Bu::FString a("1234aoeu");
	Bu::FString::iterator ai = a.begin();
	unitTest( ai.compare("1234") == false );
	unitTest( ai.compare("1234aoeu") == true );
	unitTest( ai.compare("1234aoeuee") == false );
}

{%iterator5}
{
	Bu::FString a("1234aoeu");
	Bu::FString::iterator ai = a.begin();
	unitTest( ai.compare("1234", 4) == true );
	unitTest( ai.compare("1234aoeu", 8) == true );
	unitTest( ai.compare("1234aoeuee", 10) == false );
}

{%iterator6}
{
	Bu::FString a("just ->this part");
	Bu::FString b;
	Bu::FString::iterator s = a.begin();
	for(; s; s++ )
	{
		if( *s == '>' )
		{
			s++;
			b.set( s );
			break;
		}
	}
	unitTest( b == "this part" );

	b.append( s );

	Bu::FString c;
	c.set( b.begin() );

	// This is here because the comparison operator used to cause flattening.
	unitTest( b == "this partthis part" );
	unitTest( c == b );
}

{%iterator7}
{
	Bu::FString a("just [this] part");
	Bu::FString b;
	Bu::FString::iterator s = a.begin();
	for(; s; s++ )
	{
		if( *s == '[' )
		{
			s++;
			break;
		}
	}
	Bu::FString::iterator e = s;
	for(; e; e++ )
	{
		if( *e == ']' )
		{
			b.set( s, e );
			break;
		}
	}
	unitTest( b == "this" );

	b.append( s, e );

	for( Bu::FString::iterator i = b.begin(); i;)
	{
		Bu::FString::iterator k = i;
		k++;
		if( !k )
		{
			b.append( b.begin(), i );
			break;
		}
		i = k;
	}
	Bu::FString l;
	l.set( b.begin() );
	unitTest( l == "thisthisthisthi" );
	for( Bu::FString::iterator i = b.begin(); i;)
	{
		Bu::FString::iterator k = i;
		k++;
		if( !k )
		{
			b.append( b.begin(), i );
			break;
		}
		i = k;
	}
	l.set( b.begin() );
	unitTest( l == "thisthisthisthithisthisthisth" );
}
